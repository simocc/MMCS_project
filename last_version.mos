model charge_charge_charge
uses "mmxprs"


!##DECLARE###########################################################################################
declarations
  !Indices
	number_of_demand_points = 103
	demand_points = 1..number_of_demand_points !== i

	number_of_charging_points = 108
	charging_points = 1..number_of_charging_points !== j

	types_of_chargers = 3
	types = 1..types_of_chargers

	number_of_years = 4
	years = 1..number_of_years

	number_of_POI = 50
	poi = 1..number_of_POI

	k = 1.0
	k_e = 60
	k_h = 15
	!Parameters
	demand_e_0: array(years, demand_points) of real
	demand_h_0: array(years, demand_points) of real
	distance: array(demand_points,charging_points) of real
	Number_of_Existing_Charging_Points: array(types, charging_points) of real
	Number_of_Potential_Locations:array(charging_points) of real
	lower_bound, upper_bound, setup_cost: array(types) of real
	infra_cost: array(1..2) of real
	charger_grid: array(charging_points) of real
	demand_grid: array(demand_points) of real
	!amenities: array(poi) of integer

	!Vars
	! x_e(ij)= Number of charging cycles demanded by gsrid j, and satisfyed by a charger in grid i, for full electric
	x_e: array(years,types, demand_points,charging_points) of mpvar

	! x_h(ij)= Number of charging cycles demanded by grid j, and satisfyed by a charger in grid i, for hybrid
	x_h: array(charging_points, types, demand_points,charging_points) of mpvar

	! The number of charging stations in grid j, including existing stations
	y: array(years, types, charging_points) of mpvar
	y_new: array(years, types, charging_points) of mpvar ! y(a) - y(a-1)

	be: array(years, charging_points) of mpvar ! build+existn, be = 1 when we build new stations in year a and there were no existing stations in year a-1
	infra: array(years, charging_points) of mpvar
	build: array(years, charging_points) of mpvar ! build = 1 if we are building new stations in year a
	existn: array(years, charging_points) of mpvar ! existn = 1 if there were no existing stations in previous year.
end-declarations


!##INITIALIZE#########################################################################################
initialisations from "dat3.dat"
  demand_e_0 demand_h_0 distance Number_of_Potential_Locations Number_of_Existing_Charging_Points setup_cost infra_cost
  lower_bound upper_bound charger_grid demand_grid amenities
end-initialisations


!##OBJECTIVE FUNCTION##################################################################################
total_distance:= sum(i in demand_points, j in charging_points, t in types, a in years) ((x_e(a,t,i,j) +  x_h(a,t,i,j))*distance(i,j)*(0.4)) ! in km




!##CONSTRAINTS#########################################################################################
! satisfy demand
forall (j in charging_points) do
	forall (i in demand_points) do
		forall (t in types) do
			forall (a in years) do
				x_e(a,t,i,j) is_integer
				x_h(a,t,i,j) is_integer
				y(a,t,j) is_integer
				y_new(a,t,j) is_integer
				be(a,j) is_binary
				build(a,j) is_binary
				existn(a,j) is_binary
			end-do
		end-do
	end-do
end-do


! The total number of charging points are equal to the cumulative sum of new charging points plus the number of existing
! charging points, of any type in any charging point.
forall(j in charging_points, t in types) do
	y_new(1,t,j) = y(1,t,j) -  Number_of_Existing_Charging_Points(t,j)
	forall(a in 2..number_of_years) do
		y_new(a,t,j) = y(a,t,j) - y(a-1,t,j)
	end-do
end-do


! The total number of charging points can't be less than the number of existing charging points, and can't exceed the number
! existing charging points plus the number of potential charging points, in any grid and in any year.
forall (j in charging_points, a in years) do
	sum(t in types) y(a,t,j) >=  sum(t in types) Number_of_Existing_Charging_Points(t,j)
	sum(t in types) y(a,t,j) <= Number_of_Potential_Locations(j) + sum(t in types) Number_of_Existing_Charging_Points(t,j)
end-do


! satisfy demand in each grid, according to the satisfaction rate k which is between 0 and 1.
forall (a in years, i in demand_points) do
  sum(j in charging_points,t in types) x_e(a,t,i,j) >= k * demand_e_0(a,i)
  sum(j in charging_points,t in types) x_h(a,t,i,j) >= k * demand_h_0(a,i)
end-do


! satisfy capacity of charging station, k_e is the average energy need for charging full-electric cars, and k_h for hybrid
! cars (in kWh). Then, multiplication of these parameters with the respective number of charging cycles can't exceed the
! capacity of charging stations.
forall (j in charging_points) do
	forall(t in types,a in years) do
		sum(i in demand_points) (k_e*x_e(a,t,i,j)+k_h*x_h(a,t,i,j)) <= upper_bound(t) * y(a,t,j)
	end-do

	forall (i in demand_points,a in years) do
	x_h(a,3,i,j) = 0 ! hybrid cars cant use rapid chargers
	end-do
end-do

forall (j in charging_points) do
	(1-existn(1,j)) <=  Number_of_Existing_Charging_Points(3,j)
	10*(1-existn(1,j)) >=  Number_of_Existing_Charging_Points(3,j)

	forall(a in 2..number_of_years) do
	(1-existn(a,j)) <= y(a-1,3,j)
	10*(1-existn(a,j)) >= y(a-1,3,j)  ! If there were not existing rapid chargers in the previous year, existn binary variable
	! is 1 and 0 otherwise. The last 4 constraints are satisfying this if-else condition. This will be used for infra costs.
	end-do
end-do


! Traffic constraint
forall (j in charging_points, a in years) do
	sum(t in types) y(a,t,j) <= 10 ! By limiting the number of charging points in each grid, we aim to avoid too much traffic
! where the demand is too high, especially city center.

! Infrastructure costs
	10*build(a,j) >= y_new(a,3,j)
	build(a,j) <= y_new(a,3,j) ! if we are opening new rapid charging stations, build(a,j) is 1, and 0 otherwise.
	build(a,j) + existn(a,j) + be(a,j) >= 1
	build(a,j) + existn(a,j) + 2*be(a,j) <= 2 !If we are not building any rapid stations and there exist at least one rapid
	!stations, be(aj) will be 1 (The last two constraints)

	infra(a,j) = build(a,j)*infra_cost(1) + (build(a,j) + existn(a,j) - 1)*infra_cost(2) + be(a,j)*infra_cost(2)
	! If we are building a rapid station, there is a fixed infra_cost(1). If we are building a rapid station and there is no
	! existing rapid stations in the previous year, we will have additional infra_cost(2). If there are existing stations and
	! we are not building, (build(a,j) + existn(a,j) - 1) becomes -1, which incurs a negative cost which is not possible. To
	! avoid this, we defined the variable be(a,j) which adds the same cost and make the infrastructure cost zero.
end-do



!Charging Point Balance Constraints
forall (j in charging_points, t in types, a in 1..(number_of_years-1)) do
	y(a,t,j) <= y(a+1,t,j)
end-do

! points of interests (amenities)
!forall(a in years, b in poi) do
!	sum(t in types) y(a,t,amenities(b)) >= 1 !0.2*sum(j in charging_points,t in types) y(a,t,j)
!end-do


budget := 350000
! Total cost for each year equals the sum of the setup costs of all new charging points built, plus the total
! infrastructure cost for rapid chargers in that year.
forall (a in years) do
	costs := sum(j in charging_points, t in types) (setup_cost(t)*y_new(a,t,j)) + sum(j in charging_points) infra(a,j)
	costs <= budget
end-do


minimise(total_distance)




!##SOLVE#########################################################################################

!Display solution if OK
if(getprobstat = XPRS_OPT) then
	writeln("Problem solved succefully")
elif(getprobstat = XPRS_UBND) then
 	writeln("Problem is unbounded")
elif(getprobstat = XPRS_INF) then
 	writeln("Problem is infeasible")
end-if


forall(a in years) do
writeln("For year ", a)
	forall(j in charging_points, t in types) do
	if getsol(y(a,t,j)) > 0 then
		writeln("In grid ", charger_grid(j), ", type ", t, ": ", getsol(y(a,t,j)), ", infra cost: ", getsol(infra(a,j)), ", existn: ", getsol(existn(a,j)), ", ii: ", getsol(be(a,j)))
	end-if
end-do
end-do

! output as csv file
fopen("Chargers450100.csv", F_OUTPUT)
writeln("Ref",",","Slow_year1", "Fast_year1" ,"Rapid_year1"," infra cost","Slow_year2", "Fast_year2" ,"Rapid_year2"," infra cost","Slow_year3", "Fast_year3" ,"Rapid_year3"," infra cost","Slow_year4", "Fast_year4" ,"Rapid_year4"," infra cost")
forall(j in charging_points) do
	writeln(charger_grid(j),",", getsol(y(1,1,j)),",", getsol(y(1,2,j)),",", getsol(y(1,3,j)),",",getsol(infra(1,j)),"," , getsol(y(2,1,j)),",", getsol(y(2,2,j)),",", getsol(y(2,3,j)),",",getsol(infra(2,j)),",", getsol(y(3,1,j)),",", getsol(y(3,2,j)),",", getsol(y(3,3,j)),",",getsol(infra(3,j)),",", getsol(y(4,1,j)),",", getsol(y(4,2,j)),",", getsol(y(4,3,j)),",",getsol(infra(4,j)))
end-do
fclose(F_OUTPUT)

!##DISPLAY RESULTS PROCEDURE#########################################################################################



writeln("Total distance: ", getobjval,"km.")

forall (a in years) do
costs := sum(j in charging_points, t in types) (setup_cost(t)*y_new(a,t,j)) + sum(j in charging_points) infra(a,j)
writeln("Total money needed: ", getsol(costs))
end-do





end-model


