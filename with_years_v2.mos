model charge_charge_charge
uses "mmxprs"


!##DECLARE###########################################################################################
declarations
  !Indices
	number_of_demand_points = 103
	demand_points = 1..number_of_demand_points !== i

	number_of_charging_points = 108
	charging_points = 1..number_of_charging_points !== j

	types_of_chargers = 3
	types = 1..types_of_chargers

	number_of_years = 4
	years = 1..number_of_years
!	budget = 300000
	k = 1
	k_e = 60
	k_h = 15
	!Param
	demand_e_0: array(years, demand_points) of real
	demand_h_0: array(years, demand_points) of real
	distance: array(demand_points,charging_points) of real
	Number_of_Existing_Charging_Points: array(types, charging_points) of real
	Number_of_Potential_Locations:array(charging_points) of real
	lower_bound, upper_bound, setup_cost: array(types) of real
	infra_cost: array(1..2) of real
	charger_grid: array(charging_points) of real
	demand_grid: array(demand_points) of real

	!Vars
	! x_e(ij)= Number of charging cycles demanded by gsrid j, and satisfyed by a charger in grid i, for full electric
	x_e: array(years,types, demand_points,charging_points) of mpvar

	! x_h(ij)= Number of charging cycles demanded by grid j, and satisfyed by a charger in grid i, for hybrid
	x_h: array(charging_points, types, demand_points,charging_points) of mpvar

	! The number of charging stations in grid j, including existing stations
	y: array(years, types, charging_points) of mpvar

	ii: array(years, charging_points) of mpvar ! ii = 1 when we build new stations in year a and there were no existing stations in year a-1
	infra: array(years, charging_points) of mpvar
	y_new: array(years, types, charging_points) of mpvar ! y(a) - y(a-1)
	build: array(years, charging_points) of mpvar ! build = 1 if we are building new stations in year a
	existn: array(years, charging_points) of mpvar ! existn = 1 if there were no existing stations in previous year.
end-declarations

!Forward display procedure
!forward procedure DisplaySolution


!##INITIALIZE#########################################################################################
initialisations from "dat3.dat"
  demand_e_0 demand_h_0 distance Number_of_Potential_Locations Number_of_Existing_Charging_Points setup_cost infra_cost 
  lower_bound upper_bound charger_grid demand_grid
end-initialisations


!##OBJECTIVE FUNCTION##################################################################################
total_distance:= sum(i in demand_points, j in charging_points, t in types, a in years) ((x_e(a,t,i,j) +  x_h(a,t,i,j))*distance(i,j)*(0.4)) ! in km




!##CONSTRAINTS#########################################################################################
! satisfy demand
forall (j in charging_points) do
	forall (i in demand_points) do
		forall (t in types) do
			forall (a in years) do
				x_e(a,t,i,j) is_integer
				x_h(a,t,i,j) is_integer
				y(a,t,j) is_integer
				y_new(a,t,j) is_integer
				ii(a,j) is_binary
				build(a,j) is_binary
				existn(a,j) is_binary
			end-do
		end-do
	end-do
end-do


! define y_new
forall(a in years,j in charging_points, t in types) do
	sum(b in 1..a) y_new(b,t,j) + Number_of_Existing_Charging_Points(t,j)  = y(a,t,j)
end-do

! satisfy potential charging points
forall (j in charging_points, a in years) do
	sum(t in types) y(a,t,j) >=  sum(t in types) Number_of_Existing_Charging_Points(t,j)
	sum(t in types) y(a,t,j) <= Number_of_Potential_Locations(j) + sum(t in types) Number_of_Existing_Charging_Points(t,j)
end-do

! satisfy demand for each grid, multiply demand by a factor to satisfy less customers

forall (a in years, i in demand_points) do
  sum(j in charging_points,t in types) x_e(a,t,i,j) >= k * demand_e_0(a,i)
  sum(j in charging_points,t in types) x_h(a,t,i,j) >= k * demand_h_0(a,i)
end-do


! satisfy capacity of charging station, *** 42 is used to calculate demand
forall (j in charging_points) do
	forall(t in types,a in years) do
		sum(i in demand_points) (k_e*x_e(a,t,i,j)+k_h*x_h(a,t,i,j)) <= upper_bound(t) * y(a,t,j)
	end-do
	forall (i in demand_points,a in years) do
	x_h(a,3,i,j) = 0 ! hybrid cars cant use rapid chargers
	end-do
end-do



! traffic constraint (in each grid and neighbors)

! traffic constraint (in city centre)
forall (j in charging_points, a in years) do
	sum(t in types) y(a,t,j) <= 10
	10*build(a,j) >= sum(t in types) y_new(a,t,j) ! whether we are opening new charging stations
	build(a,j) + existn(a,j) - ii(a,j) <= 1
	infra(a,j) = build(a,j)*infra_cost(1) + (build(a,j) + existn(a,j) - ii(a,j))*infra_cost(2)
end-do

forall (j in charging_points) do
	1-existn(1,j) <= sum(t in types) Number_of_Existing_Charging_Points(t,j)
	forall(a in 2..number_of_years) do
	1-existn(a,j) <= sum(t in types) y(a-1,t,j) ! no existing charging station in previous year
	end-do
end-do

! points of interests

!Charging Point Balance Constraints
forall (j in charging_points, t in types, a in 1..(number_of_years-1)) do
	y(a,t,j) <= y(a+1,t,j)
end-do



! budget constraint
!budget = 1000000
!jump:= 250
!repeat
	! -Number_of_Existing_Charging_Points(j,t))
	
budget := 1250000 ! 1.25 million = successful, 1 million = took too long
forall (a in years) do
	costs := (sum(j in charging_points, t in types) setup_cost(t)*y_new(a,t,j)) + (sum(j in charging_points) infra(a,j))
	costs <= budget
end-do

!	writeln(budget,",",getobjval)
!	budget := budget + jump
!until ((getprobstat = XPRS_INF) or (budget > 1250000))

! ! setup cost
! forall(j in charging_points) do
! 	if (sum(t in types) Number_of_Existing_Charging_Points(t,j) <> 0 ) then ! e!=0
! 		50000 * ii(j) >= sum(t in types, a in years) (y(a,t,j) - Number_of_Existing_Charging_Points(t,j)) ! b != 0
! 		setup(j) >= ii(j)*infra_cost(1) ! extend cost
! 	else ! e == 0
! 		50000 * ii(j) >= sum(t in types, a in years) y(a,t,j) ! b != 0, when build = y **** need to consider the year
! 		setup(j) >= ii(j) * infra_cost(2)
! 	end-if
! end-do

minimise(total_distance)




!##SOLVE#########################################################################################

!Display solution if OK
if(getprobstat = XPRS_OPT) then
	writeln("Problem solved succefully")
elif(getprobstat = XPRS_UBND) then
 	writeln("Problem is unbounded")
elif(getprobstat = XPRS_INF) then
 	writeln("Problem is infeasible")
end-if


forall(a in years) do
writeln("For year ", a)
	forall(j in charging_points, t in types) do
	if getsol(y(a,t,j)) > 0 then
		writeln("In grid ", charger_grid(j), ", type ", t, ": ", getsol(y(a,t,j)))
	end-if
end-do
end-do

! output as csv file
fopen("Chargerss.csv", F_OUTPUT)
writeln("Ref",",","Slow_year1", "Fast_year1" ,"Rapid_year1","Slow_year2", "Fast_year2" ,"Rapid_year2","Slow_year3", "Fast_year3" ,"Rapid_year3","Slow_year4", "Fast_year4" ,"Rapid_year4")
forall(j in charging_points) do
	writeln(charger_grid(j),",", getsol(y(1,1,j)),",", getsol(y(1,2,j)),",", getsol(y(1,3,j)),",", getsol(y(2,1,j)),",", getsol(y(2,2,j)),",", getsol(y(2,3,j)),",", getsol(y(3,1,j)),",", getsol(y(3,2,j)),",", getsol(y(3,3,j)),",", getsol(y(4,1,j)),",", getsol(y(4,2,j)),",", getsol(y(4,3,j)))
end-do
fclose(F_OUTPUT)

!##DISPLAY RESULTS PROCEDURE#########################################################################################



writeln("Total distance: ", getobjval,"km.")

forall (a in years) do
writeln("Total money needed: ", sum(j in charging_points, t in types) (setup_cost(t)*getsol(y_new(a,t,j))) +  (sum(j in charging_points) getsol(infra(a,j))))  
end-do





end-model


