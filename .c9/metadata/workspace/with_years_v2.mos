{"changed":true,"filter":false,"title":"with_years_v2.mos","tooltip":"/with_years_v2.mos","value":"model charge_charge_charge\nuses \"mmxprs\"\n\n\n!##DECLARE###########################################################################################\ndeclarations\n  !Indices\n\tnumber_of_demand_points = 103\n\tdemand_points = 1..number_of_demand_points !== i\n\n\tnumber_of_charging_points = 108\n\tcharging_points = 1..number_of_charging_points !== j\n\n\ttypes_of_chargers = 3\n\ttypes = 1..types_of_chargers\n\n\tnumber_of_years = 4\n\tyears = 1..number_of_years\n!\tbudget = 300000\n\tk = 0.9\n\tk_e = 60\n\tk_h = 15\n\t\n\t!Param\n\tdemand_e_0: array(years, demand_points) of real\n\tdemand_h_0: array(years, demand_points) of real\n\tdistance: array(demand_points,charging_points) of real\n\tNumber_of_Existing_Charging_Points: array(types, charging_points) of real\n\tNumber_of_Potential_Locations:array(charging_points) of real\n\tlower_bound, upper_bound, setup_cost: array(types) of real\n\tinfra_cost: array(1..2) of real\n\tcharger_grid: array(charging_points) of real\n\tdemand_grid: array(demand_points) of real\n\n\t!Vars\n\t! x_e(ij)= Number of charging cycles demanded by gsrid j, and satisfyed by a charger in grid i, for full electric\n\tx_e: array(years,types, demand_points,charging_points) of mpvar\n\n\t! x_h(ij)= Number of charging cycles demanded by grid j, and satisfyed by a charger in grid i, for hybrid\n\tx_h: array(charging_points, types, demand_points,charging_points) of mpvar\n\n\t! The number of charging stations in grid j, including existing stations\n\ty: array(years, types, charging_points) of mpvar\n\n\tbuild: array(years, charging_points) of mpvar ! build = 1 when we build new stations in year a\n\texist: array(years, charging_points) of mpvar\n\ty_new: array(years, types, charging_points) of mpvar ! y(a) - y(a-1)\n\tdiscount: array(years, charging_points) of mpvar ! discount = 1 if we are building new stations and there are existing stations\nend-declarations\n\n!Forward display procedure\n!forward procedure DisplaySolution\n\n\n!##INITIALIZE#########################################################################################\ninitialisations from \"dat3.dat\"\n  demand_e_0 demand_h_0 distance Number_of_Potential_Locations Number_of_Existing_Charging_Points setup_cost infra_cost \n  charger_grid demand_grid lower_bound upper_bound\nend-initialisations\n\n\n!##OBJECTIVE FUNCTION##################################################################################\ntotal_distance:= sum(i in demand_points, j in charging_points, t in types, a in years) ((x_e(a,t,i,j) +  x_h(a,t,i,j))*distance(i,j)*(0.4)) ! in km\n\n\n\n\n!##CONSTRAINTS#########################################################################################\n! satisfy demand\nforall (j in charging_points) do\n\tforall (i in demand_points) do\n\t\tforall (t in types) do\n\t\t\tforall (a in years) do\n\t\t\t\tx_e(a,t,i,j) is_integer\n\t\t\t\tx_h(a,t,i,j) is_integer\n\t\t\t\ty(a,t,j) is_integer\n\t\t\t\ty_new(a,t,j) is_integer\n\t\t\t\tbuild(a,j) is_binary\n\t\t\t\texist(a,j) is_binary\n\t\t\t\tdiscount(a,j) is_binary\n\t\t\tend-do\n\t\tend-do\n\tend-do\nend-do\n\n\n! define y_new !!!!!!!!!!!\nforall(j in charging_points, t in types) do\n\ty_new(1,t,j) = y(1,t,j) - Number_of_Existing_Charging_Points(t,j)\nend-do\nforall(a in 2..number_of_years,j in charging_points, t in types) do\n\ty_new(a,t,j) = y(a,t,j) - y(a-1,t,j)\nend-do\n!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n!!!! set exist value and build value\nforall(j in charging_points) do\n\t20*build(1,j) >= sum(t in types) y_new(1,t,j)\n\t20*exist(1,j) >= sum(t in types) Number_of_Existing_Charging_Points(t,j)\nend-do\nforall(a in 2..number_of_years,j in charging_points) do\n\t20*build(a,j) >= sum(t in types) y_new(a,t,j)\n\t20*exist(a,j) >= sum(t in types) y(a-1,t,j) \nend-do\n\n\n! satisfy potential charging points *** put year in sum\nforall (j in charging_points,  a in years) do\n\tsum(t in types) y(a,t,j) >=  sum(t in types) Number_of_Existing_Charging_Points(t,j)\n\tsum(t in types) y(a,t,j) <= Number_of_Potential_Locations(j) + sum(t in types) Number_of_Existing_Charging_Points(t,j)\nend-do\n\n! satisfy demand for each grid, multiply demand by a factor to satisfy less customers\n\nforall (a in years, i in demand_points) do\n  sum(j in charging_points,t in types) x_e(a,t,i,j) >= k * demand_e_0(a,i)\n  sum(j in charging_points,t in types) x_h(a,t,i,j) >= k * demand_h_0(a,i)\nend-do\n\n! satisfy capacity of charging station, *** 60 and 15 is used to calculate demand\nforall (j in charging_points) do\n\tforall(t in types,a in years) do\n\t\tsum(i in demand_points) (k_e*x_e(a,t,i,j)+k_h*x_h(a,t,i,j)) <= upper_bound(t) * y(a,t,j)\n\tend-do\n\tforall (i in demand_points,a in years) do\n\tx_h(a,3,i,j) = 0 ! hybrid cars cant use rapid chargers\n\tend-do\nend-do\n\n\n\n! traffic constraint (in each grid and neighbors)\n! traffic constraint (in city centre)\nforall (j in charging_points, a in years) do\n\tsum(t in types) y_new(a,t,j) <= 10 ! don't build more than 10 in a year\nend-do\n\nforall (j in charging_points, a in years) do\n\t2 * discount(a,j) >= exist(a,j) + build(a,j)\n\t2 * discount(a,j) <= exist(a,j) + build(a,j)\nend-do\n\n\n! points of interests\n!Charging Point Balance Constraints\nforall (j in charging_points, t in types, a in 1..(number_of_years-1)) do\n\ty(a,t,j) <= y(a+1,t,j)\nend-do\n\n\n\n! budget constraint (use y - Existing_Charging_Points)\n!fopen(\"budget.csv\",F_OUTPUT)\n!writeln(\"budget\",\",\",\"min distance\").\n!budget = 1000000\n!jump:= 250\n!repeat\n\t! -Number_of_Existing_Charging_Points(j,t))\nbudget := 3000000\nforall (a in years) do\n\tcosts := sum(j in charging_points, t in types) (setup_cost(t)*y_new(a,t,j)+ 35000*build(a,j)- 20000*discount(a,j)) ! + 35000*build(a,j) - 20000*discount(a,j)\n\tcosts <= budget\nend-do\n!\twriteln(budget,\",\",getobjval)\n!\tbudget := budget + jump\n!until ((getprobstat = XPRS_INF) or (budget > 1250000))\n\n! ! setup cost\n! forall(j in charging_points) do\n! \tif (sum(t in types) Number_of_Existing_Charging_Points(t,j) <> 0 ) then ! e!=0\n! \t\t50000 * ii(j) >= sum(t in types, a in years) (y(a,t,j) - Number_of_Existing_Charging_Points(t,j)) ! b != 0\n! \t\tsetup(j) >= ii(j)*infra_cost(1) ! extend cost\n! \telse ! e == 0\n! \t\t50000 * ii(j) >= sum(t in types, a in years) y(a,t,j) ! b != 0, when build = y **** need to consider the year\n! \t\tsetup(j) >= ii(j) * infra_cost(2)\n! \tend-if\n! end-do\n\nminimise(total_distance)\n\n\n\n!fopen(\"myAns.csv\", F_OUTPUT)\n!writeln(\"asset\",\",\",\"fraction\")\n\n!fclose(F_OUTPUT)\n\n\n\n\n!##SOLVE#########################################################################################\n\n!Display solution if OK\nif(getprobstat = XPRS_OPT) then\n\twriteln(\"Problem solved succefully\")\nelif(getprobstat = XPRS_UBND) then\n \twriteln(\"Problem is unbounded\")\nelif(getprobstat = XPRS_INF) then\n \twriteln(\"Problem is infeasible\")\nend-if\n\n!forall(i in charging_points)do\n!\tforall (j in demand_points) do\n!\tforall(t in types) do\n!\t\tif getsol(x_h(i,j,t)) > 0 then\n!\t\t\twriteln(i ,\", \" ,j)\n!\t\tend-if\n!\tend-do\n!\tend-do\n!end-do\n\nforall(a in years) do\nwriteln(\"For year \", a)\n\tforall(j in charging_points, t in types) do\n\tif getsol(y(a,t,j)) > 0 then\n\t\twriteln(\"In grid \", charger_grid(j), \", type \", t, \": \", getsol(y(a,t,j)))\n\tend-if\nend-do\nend-do\n\n\n!##DISPLAY RESULTS PROCEDURE#########################################################################################\n\n\n\nwriteln(\"Total distance: \", getobjval,\"km.\")\n\nforall (a in years) do\ncosts := sum(j in charging_points, t in types) (setup_cost(t)*y_new(a,t,j) + 35000*build(a,j) - 20000*discount(a,j)) ! \nwriteln(\"Total money needed: \", (getsol(costs)))  \nend-do\n\nend-model\n\n\n","undoManager":{"mark":-2,"position":4,"stack":[[{"start":{"row":77,"column":3},"end":{"row":77,"column":4},"action":"remove","lines":["\t"],"id":2}],[{"start":{"row":77,"column":2},"end":{"row":77,"column":3},"action":"remove","lines":["\t"],"id":3}],[{"start":{"row":77,"column":1},"end":{"row":77,"column":2},"action":"remove","lines":["\t"],"id":4}],[{"start":{"row":77,"column":0},"end":{"row":77,"column":1},"action":"remove","lines":["\t"],"id":5}],[{"start":{"row":76,"column":27},"end":{"row":77,"column":0},"action":"remove","lines":["",""],"id":6}]]},"ace":{"folds":[],"scrolltop":1925,"scrollleft":0,"selection":{"start":{"row":154,"column":17},"end":{"row":154,"column":17},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":4,"state":"start","mode":"plugins/fico.ide.language.mosel/mode/mosel"}},"timestamp":1669220256762}