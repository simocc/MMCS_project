{"changed":false,"filter":false,"title":"with_years.mos","tooltip":"/with_years.mos","value":"model charge_charge_charge\r\nuses \"mmxprs\"\r\n\r\n\r\n!##DECLARE###########################################################################################\r\ndeclarations\r\n  !Indices\r\n\tnumber_of_demand_points = 103\r\n\tdemand_points = 1..number_of_demand_points !== i\r\n\r\n\tnumber_of_charging_points = 108\r\n\tcharging_points = 1..number_of_charging_points !== j\r\n\r\n\ttypes_of_chargers = 3\r\n\ttypes = 1..types_of_chargers\r\n\r\n\tnumber_of_years = 3\r\n\tyears = 1..number_of_years\r\n!\tbudget = 300000\r\n\tk = 1\r\n\tk_e = 60\r\n\tk_h = 15\r\n\r\n\t!Param\r\n\tdemand_e_0: array(years, demand_points) of real\r\n\tdemand_h_0: array(years, demand_points) of real\r\n\tdistance: array(demand_points,charging_points) of real\r\n\tNumber_of_Existing_Charging_Points: array(types, charging_points) of real\r\n\tNumber_of_Potential_Locations:array(charging_points) of real\r\n\tlower_bound, upper_bound, setup_cost: array(types) of real\r\n\tinfra_cost: array(1..2) of real\r\n\r\n\t!Vars\r\n\t! x_e(ij)= Number of charging cycles demanded by gsrid j, and satisfyed by a charger in grid i, for full electric\r\n\tx_e: array(years,types, demand_points,charging_points) of mpvar\r\n\r\n\t! x_h(ij)= Number of charging cycles demanded by grid j, and satisfyed by a charger in grid i, for hybrid\r\n\tx_h: array(charging_points, types, demand_points,charging_points) of mpvar\r\n\r\n\t! The number of charging stations in grid j, including existing stations (cumulative)\r\n\ty: array(years, types, charging_points) of mpvar\r\n\t\r\n\t\r\n\tbuild: array(years, charging_points) of mpvar ! build = 1 when we build new stations in year a\r\n\texist: array(years, charging_points) of mpvar\r\n\ty_new: array(years, types, charging_points) of mpvar ! y(a) - y(a-1)\r\n\tdiscount: array(years, charging_points) of mpvar ! discount = 1 if we are building new stations and there are existing stations\r\n\r\nend-declarations\r\n\r\n!Forward display procedure\r\n!forward procedure DisplaySolution\r\n\r\n\r\n!##INITIALIZE#########################################################################################\r\ninitialisations from \"dat3.dat\"\r\n  demand_e_0 demand_h_0 distance Number_of_Potential_Locations Number_of_Existing_Charging_Points setup_cost infra_cost\r\n  lower_bound upper_bound\r\nend-initialisations\r\n\r\n\r\n!##OBJECTIVE FUNCTION##################################################################################\r\ntotal_distance:= sum(i in demand_points, j in charging_points, t in types, a in years) ((x_e(a,t,i,j) +  x_h(a,t,i,j))*distance(i,j)*(0.4)) ! in km\r\n\r\n\r\n\r\n\r\n!##CONSTRAINTS#########################################################################################\r\n! satisfy demand\r\nforall (j in charging_points) do\r\n\tforall (i in demand_points) do\r\n\t\tforall (t in types) do\r\n\t\t\tforall (a in years) do\r\n\t\t\t\tx_e(a,t,i,j) is_integer\r\n\t\t\t\tx_h(a,t,i,j) is_integer\r\n\t\t\t\ty(a,t,j) is_integer\r\n\t\t\t\ty_new(a,t,j) is_integer\r\n\t\t\t\t\r\n\t\t\t\tbuild(a,j) is_binary\r\n\t\t\t\texist(a,j) is_binary\r\n\t\t\t\tdiscount(a,j) is_binary\r\n\t\t\tend-do\r\n\t\tend-do\r\n\tend-do\r\nend-do\r\n\r\n\r\n\r\n! satisfy potential charging points\r\nforall (j in charging_points, a in years) do\r\n\tsum(t in types) y(a,t,j) >=  sum(t in types) Number_of_Existing_Charging_Points(t,j)\r\n\tsum(t in types) y(a,t,j) <= Number_of_Potential_Locations(j) + sum(t in types) Number_of_Existing_Charging_Points(t,j)\r\nend-do\r\n\r\n! satisfy demand for each grid, multiply demand by a factor to satisfy less customers\r\n\r\nforall (a in years, i in demand_points) do\r\n  sum(j in charging_points,t in types) x_e(a,t,i,j) >= k * demand_e_0(a,i)\r\n  sum(j in charging_points,t in types) x_h(a,t,i,j) >= k * demand_h_0(a,i)\r\nend-do\r\n\r\n! satisfy capacity of charging station, *** 42 is used to calculate demand\r\nforall (j in charging_points) do\r\n\tforall(t in types,a in years) do\r\n\t\tsum(i in demand_points) (k_e*x_e(a,t,i,j)+k_h*x_h(a,t,i,j)) <= upper_bound(t) * y(a,t,j)\r\n\tend-do\r\n\tforall (i in demand_points,a in years) do\r\n\t! hybrid cars cant use rapid chargers\r\n\tx_h(a,3,i,j) = 0\r\n\tend-do\r\nend-do\r\n\r\n\r\n\r\n! traffic constraint (in each grid and neighbors)\r\n\r\n! traffic constraint (in city centre)\r\nforall (j in charging_points, a in years) do\r\n\tsum(t in types) y(a,t,j) <= 10\r\nend-do\r\n\r\n\r\n! points of interests\r\n!Charging Point Balance Constraints\r\nforall (j in charging_points, t in types, a in 1..(number_of_years-1)) do\r\n\ty(a,t,j) <= y(a+1,t,j)\r\nend-do\r\n\r\n\r\n\r\n! budget constraint (use y - Existing_Charging_Points)\r\n!fopen(\"budget.csv\",F_OUTPUT)\r\n!writeln(\"budget\",\",\",\"min distance\")\r\nbudget := 100000000\r\n!jump:= 250\r\n!repeat\r\n\t! -Number_of_Existing_Charging_Points(j,t))\r\ncosts := sum(j in charging_points, t in types, a in years) (setup_cost(t)*(y(a,t,j)-4*Number_of_Existing_Charging_Points(t,j)))\r\n\r\n!\twriteln(budget,\",\",getobjval)\r\n!\tbudget := budget + jump\r\n!until ((getprobstat = XPRS_INF) or (budget > 1250000))\r\n\r\ncosts <= budget\r\nminimise(total_distance)\r\n\r\n\r\n\r\n!fopen(\"myAns.csv\", F_OUTPUT)\r\n!writeln(\"asset\",\",\",\"fraction\")\r\n\r\n!fclose(F_OUTPUT)\r\n\r\n\r\n\r\n\r\n!##SOLVE#########################################################################################\r\n\r\n!Display solution if OK\r\nif(getprobstat = XPRS_OPT) then\r\n\twriteln(\"Problem solved succefully\")\r\nelif(getprobstat = XPRS_UBND) then\r\n \twriteln(\"Problem is unbounded\")\r\nelif(getprobstat = XPRS_INF) then\r\n \twriteln(\"Problem is infeasible\")\r\nend-if\r\n\r\n!forall(i in charging_points)do\r\n!\tforall (j in demand_points) do\r\n!\tforall(t in types) do\r\n!\t\tif getsol(x_h(i,j,t)) > 0 then\r\n!\t\t\twriteln(i ,\", \" ,j)\r\n!\t\tend-if\r\n!\tend-do\r\n!\tend-do\r\n!end-do\r\n\r\nforall(a in years) do\r\nwriteln(\"For year \", a)\r\nforall(j in charging_points, t in types) do\r\n\tif getsol(y(a,t,j)) > 0 then\r\n\t\twriteln(\"Open \", getsol(y(a,t,j)), \" stations in grid \", j, \" with type \", t)\r\n\tend-if\r\nend-do\r\nend-do\r\n\r\n\r\n!##DISPLAY RESULTS PROCEDURE#########################################################################################\r\n\r\n\r\n\r\nwriteln(\"Total distance: \", getobjval,\"km.\")\r\n\r\n\r\nend-model\r\n\r\n\r\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":17,"column":27},"end":{"row":17,"column":27},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1669219192746}