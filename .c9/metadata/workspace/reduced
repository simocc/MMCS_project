{"filter":false,"title":"reduced","tooltip":"/reduced","undoManager":{"mark":23,"position":23,"stack":[[{"start":{"row":0,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["model ModelName","  options noimplicit","  uses \"mmxprs\"","  ! uses \"mminsight\" ! uncomment this line for an Xpress Insight model","","  declarations","    ! ...","    Objective:linctr","  end-declarations","","  writeln(\"Begin running model\")","  !...","  writeln(\"End running model\")","end-model",""],"id":1},{"start":{"row":0,"column":0},"end":{"row":222,"column":0},"action":"insert","lines":["model charge_charge_charge","uses \"mmxprs\"","","","!##DECLARE###########################################################################################","declarations","  !Indices","\tnumber_of_demand_points = 434","\tdemand_points = 1..number_of_demand_points !== i","","\tnumber_of_charging_points = 434","\tcharging_points = 1..number_of_charging_points !== j","","\ttypes_of_chargers = 3","\ttypes = 1..types_of_chargers","","\tnumber_of_years = 4","\tyears = 1..number_of_years","!\tbudget = 300000","\tk = 1","\tk_e = 60","\tk_h = 15","","\t!Param","\tdemand_e_0: array(years, demand_points) of real","\tdemand_h_0: array(years, demand_points) of real","\tdistance: array(demand_points,charging_points) of real","\tNumber_of_Existing_Charging_Points: array(types, charging_points) of real","\tNumber_of_Potential_Locations:array(charging_points) of real","\tlower_bound, upper_bound, setup_cost: array(types) of real","\tinfra_cost: array(1..2) of real","","\t!Vars","\t! x_e(ij)= Number of charging cycles demanded by gsrid j, and satisfyed by a charger in grid i, for full electric","\tx_e: array(years,types, demand_points,charging_points) of mpvar","","\t! x_h(ij)= Number of charging cycles demanded by grid j, and satisfyed by a charger in grid i, for hybrid","\tx_h: array(charging_points, types, demand_points,charging_points) of mpvar","","\t! The number of charging stations in grid j, including existing stations","\ty: array(years, types, charging_points) of mpvar","","\tii: array(years, charging_points) of mpvar ! ii = 1 when we build new stations in year a and there were no existing stations in year a-1","\tsetup: array(charging_points) of mpvar","\tyy: array(years, types, charging_points) of mpvar ! y(a) - y(a-1)","\tz: array(years, charging_points) of mpvar ! z = 1 if we are building new stations in year a","\tzz: array(years, charging_points) of mpvar ! zz = 1 if there were existing stations","end-declarations","","!Forward display procedure","!forward procedure DisplaySolution","","","!##INITIALIZE#########################################################################################","initialisations from \"data_2.dat\"","  demand_e_0 demand_h_0 distance Number_of_Potential_Locations Number_of_Existing_Charging_Points setup_cost infra_cost","  lower_bound upper_bound","end-initialisations","","","!##OBJECTIVE FUNCTION##################################################################################","total_distance:= sum(i in demand_points, j in charging_points, t in types, a in years) ((x_e(a,t,i,j) +  x_h(a,t,i,j))*distance(i,j)*(0.4)) ! in km","","","","","!##CONSTRAINTS#########################################################################################","! satisfy demand","forall (j in charging_points) do","\tforall (i in demand_points) do","\t\tforall (t in types) do","\t\t\tforall (a in years) do","\t\t\t\tx_e(a,t,i,j) is_integer","\t\t\t\tx_h(a,t,i,j) is_integer","\t\t\t\ty(a,t,j) is_integer","\t\t\t\tyy(a,t,j) is_integer","\t\t\t\tii(a,j) is_binary","\t\t\t\tz(a,j) is_binary","\t\t\t\tzz(a,j) is_binary","\t\t\t\tsetup(j) is_integer","\t\t\tend-do","\t\tend-do","\tend-do","end-do","","","! define yy","forall(a in years,j in charging_points, t in types) do","\tsum(b in 1..a) yy(b,t,j) = y(a,t,j)","end-do","","! satisfy potential charging points","forall (j in charging_points, a in years) do","\tsum(t in types) y(a,t,j) >=  sum(t in types) Number_of_Existing_Charging_Points(t,j)","\tsum(t in types) y(a,t,j) <= Number_of_Potential_Locations(j) + sum(t in types) Number_of_Existing_Charging_Points(t,j)","end-do","","! satisfy demand for each grid, multiply demand by a factor to satisfy less customers","","forall (a in years, i in demand_points) do","  sum(j in charging_points,t in types) x_e(a,t,i,j) >= k * demand_e_0(a,i)","  sum(j in charging_points,t in types) x_h(a,t,i,j) >= k * demand_h_0(a,i)","end-do","","! satisfy capacity of charging station, *** 42 is used to calculate demand","","forall (j in charging_points) do","\tforall(t in types,a in years) do","\t\t!sum(i in demand_points) k*(x_e(i,j,t)+x_h(i,j,t)) >= lower_bound(t) * y(j,t)","\t\tsum(i in demand_points) (k_e*x_e(a,t,i,j)+k_h*x_h(a,t,i,j)) <= upper_bound(t) * y(a,t,j)","\tend-do","\tforall (i in demand_points,a in years) do","\t! hybrid cars cant use rapid chargers","\tx_h(a,3,i,j) = 0","\tend-do","end-do","","","","! traffic constraint (in each grid and neighbors)","","! traffic constraint (in city centre)","forall (j in charging_points, a in years) do","\tsum(t in types) y(a,t,j) <= 10","\t10*z(a,j) >= sum(t in types) yy(a,t,j) ! whether we are opening new charging stations","\tz(a,j) + zz(a,j) - ii(a,j) <= 1","end-do","","forall (j in charging_points) do","\t10*zz(1,j) >= sum(t in types) Number_of_Existing_Charging_Points(t,j)","\tforall(a in 2..4) do","\t10*(1-zz(a,j)) >= sum(t in types) y(a-1,t,j) ! no existing charging station in previous year","\tend-do","end-do","","! points of interests","","!Charging Point Balance Constraints","forall (j in charging_points, t in types, a in 1..3) do","\ty(a,t,j) <= y(a+1,t,j)","end-do","","","","! budget constraint (use y - Existing_Charging_Points)","!fopen(\"budget.csv\",F_OUTPUT)","!writeln(\"budget\",\",\",\"min distance\")","budget := 100000000","!jump:= 250","!repeat","\t! -Number_of_Existing_Charging_Points(j,t))","costs := sum(j in charging_points, t in types, a in years) (setup_cost(t)*(y(a,t,j)-4*Number_of_Existing_Charging_Points(t,j)) + z(a,j)*15000 +\t(z(a,j) + zz(a,j) - ii(a,j))*20000)","","!\twriteln(budget,\",\",getobjval)","!\tbudget := budget + jump","!until ((getprobstat = XPRS_INF) or (budget > 1250000))","","! ! setup cost","! forall(j in charging_points) do","! \tif (sum(t in types) Number_of_Existing_Charging_Points(t,j) <> 0 ) then ! e!=0","! \t\t50000 * ii(j) >= sum(t in types, a in years) (y(a,t,j) - Number_of_Existing_Charging_Points(t,j)) ! b != 0","! \t\tsetup(j) >= ii(j)*infra_cost(1) ! extend cost","! \telse ! e == 0","! \t\t50000 * ii(j) >= sum(t in types, a in years) y(a,t,j) ! b != 0, when build = y **** need to consider the year","! \t\tsetup(j) >= ii(j) * infra_cost(2)","! \tend-if","! end-do","","costs <= budget","minimise(total_distance)","","","","!fopen(\"myAns.csv\", F_OUTPUT)","!writeln(\"asset\",\",\",\"fraction\")","","!fclose(F_OUTPUT)","","","","","!##SOLVE#########################################################################################","","!Display solution if OK","if(getprobstat = XPRS_OPT) then","\twriteln(\"Problem solved succefully\")","elif(getprobstat = XPRS_UBND) then"," \twriteln(\"Problem is unbounded\")","elif(getprobstat = XPRS_INF) then"," \twriteln(\"Problem is infeasible\")","end-if","","!forall(i in charging_points)do","!\tforall (j in demand_points) do","!\tforall(t in types) do","!\t\tif getsol(x_h(i,j,t)) > 0 then","!\t\t\twriteln(i ,\", \" ,j)","!\t\tend-if","!\tend-do","!\tend-do","!end-do","","forall(a in years) do","writeln(\"For year \", a)","forall(j in charging_points, t in types) do","\tif getsol(y(a,t,j)) > 0 then","\t\twriteln(\"Open \", getsol(y(a,t,j)), \" stations in grid \", j, \" with type \", t)","\tend-if","end-do","end-do","","","!##DISPLAY RESULTS PROCEDURE#########################################################################################","","","","writeln(\"Total distance: \", getobjval,\"km.\")","","","end-model","","",""]}],[{"start":{"row":7,"column":27},"end":{"row":7,"column":30},"action":"remove","lines":["434"],"id":2},{"start":{"row":7,"column":27},"end":{"row":7,"column":28},"action":"insert","lines":["1"]}],[{"start":{"row":7,"column":28},"end":{"row":7,"column":29},"action":"insert","lines":["0"],"id":3}],[{"start":{"row":7,"column":29},"end":{"row":7,"column":30},"action":"insert","lines":["3"],"id":4}],[{"start":{"row":10,"column":31},"end":{"row":10,"column":32},"action":"remove","lines":["4"],"id":5}],[{"start":{"row":10,"column":30},"end":{"row":10,"column":31},"action":"remove","lines":["3"],"id":6}],[{"start":{"row":10,"column":29},"end":{"row":10,"column":30},"action":"remove","lines":["4"],"id":7}],[{"start":{"row":10,"column":29},"end":{"row":10,"column":30},"action":"insert","lines":["3"],"id":8}],[{"start":{"row":10,"column":30},"end":{"row":10,"column":31},"action":"insert","lines":["2"],"id":9}],[{"start":{"row":10,"column":31},"end":{"row":10,"column":32},"action":"insert","lines":["6"],"id":10}],[{"start":{"row":54,"column":27},"end":{"row":54,"column":28},"action":"remove","lines":["2"],"id":11}],[{"start":{"row":54,"column":26},"end":{"row":54,"column":27},"action":"remove","lines":["_"],"id":12}],[{"start":{"row":54,"column":26},"end":{"row":54,"column":27},"action":"insert","lines":["3"],"id":13}],[{"start":{"row":54,"column":25},"end":{"row":54,"column":26},"action":"remove","lines":["a"],"id":14}],[{"start":{"row":151,"column":127},"end":{"row":151,"column":178},"action":"remove","lines":["+ z(a,j)*15000 +\t(z(a,j) + zz(a,j) - ii(a,j))*20000"],"id":15}],[{"start":{"row":151,"column":128},"end":{"row":151,"column":129},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":151,"column":129},"end":{"row":151,"column":130},"action":"insert","lines":["!"],"id":17}],[{"start":{"row":151,"column":130},"end":{"row":151,"column":131},"action":"insert","lines":[" "],"id":18}],[{"start":{"row":151,"column":131},"end":{"row":151,"column":182},"action":"insert","lines":["+ z(a,j)*15000 +\t(z(a,j) + zz(a,j) - ii(a,j))*20000"],"id":19}],[{"start":{"row":121,"column":0},"end":{"row":121,"column":2},"action":"insert","lines":["! "],"id":20},{"start":{"row":122,"column":0},"end":{"row":122,"column":2},"action":"insert","lines":["! "]},{"start":{"row":123,"column":0},"end":{"row":123,"column":2},"action":"insert","lines":["! "]},{"start":{"row":124,"column":0},"end":{"row":124,"column":2},"action":"insert","lines":["! "]},{"start":{"row":125,"column":0},"end":{"row":125,"column":2},"action":"insert","lines":["! "]},{"start":{"row":126,"column":0},"end":{"row":126,"column":2},"action":"insert","lines":["! "]}],[{"start":{"row":128,"column":0},"end":{"row":128,"column":2},"action":"insert","lines":["! "],"id":21},{"start":{"row":129,"column":0},"end":{"row":129,"column":2},"action":"insert","lines":["! "]},{"start":{"row":130,"column":0},"end":{"row":130,"column":2},"action":"insert","lines":["! "]},{"start":{"row":131,"column":0},"end":{"row":131,"column":2},"action":"insert","lines":["! "]},{"start":{"row":132,"column":0},"end":{"row":132,"column":2},"action":"insert","lines":["! "]},{"start":{"row":133,"column":0},"end":{"row":133,"column":2},"action":"insert","lines":["! "]}],[{"start":{"row":78,"column":21},"end":{"row":79,"column":23},"action":"remove","lines":["","\t\t\t\tsetup(j) is_integer"],"id":22}],[{"start":{"row":75,"column":4},"end":{"row":75,"column":6},"action":"insert","lines":["! "],"id":23},{"start":{"row":76,"column":4},"end":{"row":76,"column":6},"action":"insert","lines":["! "]},{"start":{"row":77,"column":4},"end":{"row":77,"column":6},"action":"insert","lines":["! "]},{"start":{"row":78,"column":4},"end":{"row":78,"column":6},"action":"insert","lines":["! "]}],[{"start":{"row":42,"column":1},"end":{"row":42,"column":3},"action":"insert","lines":["! "],"id":24},{"start":{"row":43,"column":1},"end":{"row":43,"column":3},"action":"insert","lines":["! "]},{"start":{"row":44,"column":1},"end":{"row":44,"column":3},"action":"insert","lines":["! "]},{"start":{"row":45,"column":1},"end":{"row":45,"column":3},"action":"insert","lines":["! "]},{"start":{"row":46,"column":1},"end":{"row":46,"column":3},"action":"insert","lines":["! "]}]]},"ace":{"folds":[],"scrolltop":1680,"scrollleft":0,"selection":{"start":{"row":123,"column":73},"end":{"row":123,"column":73},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":115,"state":"start","mode":"ace/mode/text"}},"timestamp":1669144738903,"hash":"e50accf6751661be1c2eb21d49f4c517d75c7ef8"}